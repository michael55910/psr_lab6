package model;

import com.datastax.oss.driver.api.core.PagingIterable;
import com.datastax.oss.driver.api.core.cql.BoundStatement;
import com.datastax.oss.driver.api.core.cql.BoundStatementBuilder;
import com.datastax.oss.driver.api.core.cql.PreparedStatement;
import com.datastax.oss.driver.api.core.cql.SimpleStatement;
import com.datastax.oss.driver.api.mapper.MapperContext;
import com.datastax.oss.driver.api.mapper.entity.saving.NullSavingStrategy;
import com.datastax.oss.driver.internal.core.util.concurrent.BlockingOperation;
import com.datastax.oss.driver.internal.core.util.concurrent.CompletableFutures;
import com.datastax.oss.driver.internal.mapper.DaoBase;
import com.datastax.oss.driver.internal.querybuilder.update.DefaultUpdate;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.lang.Throwable;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Generated by the DataStax driver mapper, do not edit directly.
 */
@SuppressWarnings("all")
public class CaseDaoImpl__MapperGenerated extends DaoBase implements CaseDao {
  private static final Logger LOG = LoggerFactory.getLogger(CaseDaoImpl__MapperGenerated.class);

  private final CaseHelper__MapperGenerated caseHelper;

  private final PreparedStatement getByIdStatement;

  private final PreparedStatement saveStatement;

  private final PreparedStatement updateStatement;

  private final PreparedStatement deleteStatement;

  private final PreparedStatement getAllStatement;

  private final PreparedStatement getByTypeStatement;

  private CaseDaoImpl__MapperGenerated(MapperContext context,
      CaseHelper__MapperGenerated caseHelper, PreparedStatement getByIdStatement,
      PreparedStatement saveStatement, PreparedStatement updateStatement,
      PreparedStatement deleteStatement, PreparedStatement getAllStatement,
      PreparedStatement getByTypeStatement) {
    super(context);
    this.caseHelper = caseHelper;
    this.getByIdStatement = getByIdStatement;
    this.saveStatement = saveStatement;
    this.updateStatement = updateStatement;
    this.deleteStatement = deleteStatement;
    this.getAllStatement = getAllStatement;
    this.getByTypeStatement = getByTypeStatement;
  }

  @Override
  public Case getById(Long id) {
    BoundStatementBuilder boundStatementBuilder = getByIdStatement.boundStatementBuilder();

    boundStatementBuilder = boundStatementBuilder.set("id", id, Long.class);

    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToSingleEntity(boundStatement, caseHelper);
  }

  @Override
  public void save(Case aCase) {
    BoundStatementBuilder boundStatementBuilder = saveStatement.boundStatementBuilder();
    caseHelper.set(aCase, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET);

    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public void update(Case aCase) {
    BoundStatementBuilder boundStatementBuilder = updateStatement.boundStatementBuilder();
    caseHelper.set(aCase, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET);

    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public void delete(Case aCase) {
    BoundStatementBuilder boundStatementBuilder = deleteStatement.boundStatementBuilder();

    boundStatementBuilder = boundStatementBuilder.set("id", aCase.getId(), Long.class);

    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public PagingIterable<Case> getAll() {
    BoundStatementBuilder boundStatementBuilder = getAllStatement.boundStatementBuilder();

    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToEntityIterable(boundStatement, caseHelper);
  }

  @Override
  public PagingIterable<Case> getByType(String otype) {
    BoundStatementBuilder boundStatementBuilder = getByTypeStatement.boundStatementBuilder();

    boundStatementBuilder = boundStatementBuilder.set("otype", otype, String.class);

    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToEntityIterable(boundStatement, caseHelper);
  }

  public static CompletableFuture<CaseDao> initAsync(MapperContext context) {
    LOG.debug("[{}] Initializing new instance for keyspace = {} and table = {}",
        context.getSession().getName(),
        context.getKeyspaceId(),
        context.getTableId());
    throwIfProtocolVersionV3(context);
    try {
      // Initialize all entity helpers
      CaseHelper__MapperGenerated caseHelper = new CaseHelper__MapperGenerated(context);
      if ((Boolean)context.getCustomState().get("datastax.mapper.schemaValidationEnabled")) {
        caseHelper.validateEntityFields();
      }
      List<CompletionStage<PreparedStatement>> prepareStages = new ArrayList<>();
      // Prepare the statement for `getById(java.lang.Long)`:
      SimpleStatement getByIdStatement_simple = caseHelper.selectByPrimaryKeyParts(1).build();
      LOG.debug("[{}] Preparing query `{}` for method getById(java.lang.Long)",
          context.getSession().getName(),
          getByIdStatement_simple.getQuery());
      CompletionStage<PreparedStatement> getByIdStatement = prepare(getByIdStatement_simple, context);
      prepareStages.add(getByIdStatement);
      // Prepare the statement for `save(model.Case)`:
      SimpleStatement saveStatement_simple = caseHelper.insert().build();
      LOG.debug("[{}] Preparing query `{}` for method save(model.Case)",
          context.getSession().getName(),
          saveStatement_simple.getQuery());
      CompletionStage<PreparedStatement> saveStatement = prepare(saveStatement_simple, context);
      prepareStages.add(saveStatement);
      // Prepare the statement for `update(model.Case)`:
      SimpleStatement updateStatement_simple = SimpleStatement.newInstance(((DefaultUpdate)caseHelper.updateByPrimaryKey()).asCql());
      LOG.debug("[{}] Preparing query `{}` for method update(model.Case)",
          context.getSession().getName(),
          updateStatement_simple.getQuery());
      CompletionStage<PreparedStatement> updateStatement = prepare(updateStatement_simple, context);
      prepareStages.add(updateStatement);
      // Prepare the statement for `delete(model.Case)`:
      SimpleStatement deleteStatement_simple = caseHelper.deleteByPrimaryKeyParts(1).build();
      LOG.debug("[{}] Preparing query `{}` for method delete(model.Case)",
          context.getSession().getName(),
          deleteStatement_simple.getQuery());
      CompletionStage<PreparedStatement> deleteStatement = prepare(deleteStatement_simple, context);
      prepareStages.add(deleteStatement);
      // Prepare the statement for `getAll()`:
      SimpleStatement getAllStatement_simple = caseHelper.selectByPrimaryKeyParts(0).build();
      LOG.debug("[{}] Preparing query `{}` for method getAll()",
          context.getSession().getName(),
          getAllStatement_simple.getQuery());
      CompletionStage<PreparedStatement> getAllStatement = prepare(getAllStatement_simple, context);
      prepareStages.add(getAllStatement);
      // Prepare the statement for `getByType(java.lang.String)`:
      SimpleStatement getByTypeStatement_simple = caseHelper.selectStart().whereRaw("otype = :otype").allowFiltering().build();
      LOG.debug("[{}] Preparing query `{}` for method getByType(java.lang.String)",
          context.getSession().getName(),
          getByTypeStatement_simple.getQuery());
      CompletionStage<PreparedStatement> getByTypeStatement = prepare(getByTypeStatement_simple, context);
      prepareStages.add(getByTypeStatement);
      // Initialize all method invokers
      // Build the DAO when all statements are prepared
      return CompletableFutures.allSuccessful(prepareStages)
          .thenApply(v -> (CaseDao) new CaseDaoImpl__MapperGenerated(context,
              caseHelper,
              CompletableFutures.getCompleted(getByIdStatement),
              CompletableFutures.getCompleted(saveStatement),
              CompletableFutures.getCompleted(updateStatement),
              CompletableFutures.getCompleted(deleteStatement),
              CompletableFutures.getCompleted(getAllStatement),
              CompletableFutures.getCompleted(getByTypeStatement)))
          .toCompletableFuture();
    } catch (Throwable t) {
      return CompletableFutures.failedFuture(t);
    }
  }

  public static CaseDao init(MapperContext context) {
    BlockingOperation.checkNotDriverThread();
    return CompletableFutures.getUninterruptibly(initAsync(context));
  }
}
